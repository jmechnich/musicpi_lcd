#!/usr/bin/env python

import os, sys

from musicpi_lcd.lcd         import LCD
from musicpi_lcd.printer_net import NetworkPrinter
from musicpi_lcd.printer_mpd import MPDPrinter
from musicpi_lcd.printer_gps import GPSPrinter
from musicpi_lcd.util        import colors, buttons
from musicpi_lcd.loop        import Loop

def detach():
    stdin  = '/dev/null'
    stdout = '/dev/null'
    stderr = '/dev/null'
    
    try:
        pid = os.fork()
        if pid > 0:
            # exit first parent
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
        sys.exit(1)
        
    # decouple from parent environment
    os.chdir("/")
    os.setsid()
    os.umask(0)
    
    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
        sys.exit(1)
       
    # redirect standard file descriptors
    sys.stdout.flush()
    sys.stderr.flush()
    si = file(stdin, 'r')
    so = file(stdout, 'a+')
    se = file(stderr, 'a+', 0)
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def checkIfRoot():
    if not os.geteuid() == 0:
        return False
    return True

def checkIfRunning(name, kill=False):
    pidfile = "/var/run/%s.pid" % name
    if not os.path.exists( pidfile):
        return False
    f = open(pidfile)
    oldpid = int(f.readline().strip())
    f.close()

    cmdlinefile = os.path.join('/proc',str(oldpid),'cmdline')
    if not os.path.exists( cmdlinefile):
        return False
    f = open(cmdlinefile)
    args = f.readline().strip().split('\0')
    f.close()
    if len(args) > 1 and not args[0].endswith(name):
        if not args[1].endswith(name):
            return False

    if kill:
        try:
            import signal, time
            os.kill(oldpid, signal.SIGTERM)
            time.sleep(1)
            os.kill(oldpid, signal.SIGKILL)
        except:
            pass
        return False
    
    return True
    
def createPIDFile(name):
    pidfile = '/var/run/%s.pid' % name 
    f = open(pidfile, 'w')
    print>>f, os.getpid()
    f.close()
    import atexit
    atexit.register(lambda: os.path.exists(pidfile) and os.remove(pidfile))

def main():
    name = 'musicpi-lcd'
    
    import argparse
    parser = argparse.ArgumentParser(
        description=name)
    parser.add_argument( '-d', '--daemon',
                         help='run as daemon', action="store_true")
    parser.add_argument( '-k', '--kill-running',
                         help='kill if running', action="store_true")
    parser.add_argument( '-t', '--timeout', type=float, default=30,
                         help='display timeout in ticks, disable with 0 (default: 30)')
    parser.add_argument( '-a', '--autochange', type=float, default=0,
                         help='display cycle time in ticks, disable with 0 (default: disabled)')
    parser.add_argument( '-l', '--ticklength', type=float, default=0.5,
                         help='display refresh time in seconds (default: 0.5s)')
    cmdargs = parser.parse_args()

    if not checkIfRoot():
        print "Run as root"
        sys.exit(1)
        
    if checkIfRunning(name, kill=cmdargs.kill_running):
        print "Already running, exiting"
        sys.exit(0)

    if cmdargs.daemon: detach()
    createPIDFile(name)
    
    lcd = LCD()
    cols = 16
    rows = 2
    ticklength = 0.5
    
    args = {
        'lcd':  lcd,
        'cols': cols,
        'rows':  rows,
        'ticklength': ticklength,
        'autochange': cmdargs.autochange,
        'timeout':    cmdargs.timeout,
        }
    printers  = [
        MPDPrinter    (color=colors['green'], **args),
        GPSPrinter    (color=colors['blue'],  **args),
        NetworkPrinter(color=colors['red'],   **args),
        ]
    loop = Loop(printers=printers, **args)
    try:
        while True:
            loop.iterate()
    except KeyboardInterrupt:
        pass

    for p in printers:
        p.stop()
    lcd.off()
    
if __name__ == '__main__':
    main()

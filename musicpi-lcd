#!/usr/bin/env python

import argparse, os, sys

from musicpi_lcd.lcd         import LCD
from musicpi_lcd.printer_net import NetworkPrinter
from musicpi_lcd.printer_mpd import MPDPrinter
from musicpi_lcd.printer_gps import GPSPrinter
from musicpi_lcd.util        import colors, buttons
from musicpi_lcd.loop        import Loop

def detach():
    stdin  = '/dev/null'
    stdout = '/dev/null'
    stderr = '/dev/null'
    
    try:
        pid = os.fork()
        if pid > 0:
            # exit first parent
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
        sys.exit(1)
        
    # decouple from parent environment
    os.chdir("/")
    os.setsid()
    os.umask(0)
    
    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
        sys.exit(1)
       
    # redirect standard file descriptors
    sys.stdout.flush()
    sys.stderr.flush()
    si = file(stdin, 'r')
    so = file(stdout, 'a+')
    se = file(stderr, 'a+', 0)
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def parseCommandLine():
    ret = {}
    parser = argparse.ArgumentParser(
        description='musicpi-cd')
    parser.add_argument( '-d', '--daemon',
                         help='run as daemon', action="store_true")
    args = parser.parse_args()
    
    # detach immediately if run as daemon
    if args.daemon: detach()
    
    ret['daemon'] = args.daemon

    return ret

def main():
    cmdargs = parseCommandLine()
    
    lcd = LCD()
    cols = 16
    rows = 2
    ticklength = 0.5
    
    args = {
        'lcd':  lcd,
        'cols': cols,
        'rows':  rows,
        'ticklength': ticklength,
        'autochange': 0,
        'timeout': 0,
        }
    printers  = [
        MPDPrinter(**args),
        GPSPrinter(**args),
        NetworkPrinter(**args),
        ]
    loop = Loop(printers=printers, **args)
    try:
        while True:
            loop.iterate()
    except KeyboardInterrupt:
        pass

if __name__ == '__main__':
    main()

#!/usr/bin/env python

import os, sys, logging

from musicpi_lcd.lcd         import LCD, buttons, colors
from musicpi_lcd.printer_sys import SystemPrinter
from musicpi_lcd.printer_mpd import MPDPrinter
from musicpi_lcd.printer_gps import GPSPrinter
from musicpi_lcd.loop        import Loop
from musicpi_lcd.daemon      import detach, check_if_root, check_if_running, create_pid_file, create_logger

def main():
    name = 'musicpi-lcd'
    
    import argparse
    parser = argparse.ArgumentParser(
        description=name)
    parser.add_argument( '-d', '--daemon',
                         help='run as daemon',         action="store_true")
    parser.add_argument( '-v', '--verbose',
                         help='enable verbose output', action="store_true")
    parser.add_argument( '-k', '--kill-running',
                         help='kill if running',       action="store_true")
    parser.add_argument( '-p', '--profile',
                         help='profile timing',        action="store_true")
    parser.add_argument( '-c', '--cols',       metavar='COLS', type=int,   default=16,
                         help='number of columns (default: %(default)s)')
    parser.add_argument( '-r', '--rows',       metavar='ROWS', type=int,   default=2,
                         help='number of rows (default: %(default)s)')
    parser.add_argument( '-t', '--timeout',    metavar='SECS', type=int,   default=15,
                         help='display timeout in seconds, disable with 0 (default: %(default)s)')
    parser.add_argument( '-a', '--autochange', metavar='SECS', type=int,   default=0,
                         help='display cycle time in seconds, disable with 0 (default: %(default)s)')
    parser.add_argument( '-n', '--ticklength', metavar='SECS', type=float, default=0.1,
                         help='display refresh time in seconds (default: %(default)s s)')
    parser.add_argument( '-l', '--logfile',    metavar='FILE', type=str,   default=None,
                         help='logfile name (default: %(default)s)')
    cmdargs = parser.parse_args()

    if not check_if_root():
        print "Run as root"
        sys.exit(1)
        
    if check_if_running(name, kill=cmdargs.kill_running):
        print "Already running, exiting"
        sys.exit(0)

    if cmdargs.daemon:
        detach()
    create_pid_file(name)
    
    logger = create_logger(name,logfile=cmdargs.logfile)
    logger.setLevel(logging.DEBUG if cmdargs.verbose else logging.INFO)
    
    if logger.getEffectiveLevel() == logging.DEBUG:
        logger.debug('Process ID: %d' % os.getpid())
        logger.debug('Commandline arguments')
        for k,v in cmdargs.__dict__.items():
            logger.debug(k.rjust(20) + ": %s" %str(v))
        
    lcd = LCD()
    
    args = {
        'logger'    : logger,
        'lcd'       : lcd,
        'cols'      : cmdargs.cols,
        'rows'      : cmdargs.rows,
        'ticklength': cmdargs.ticklength,
        'autochange': cmdargs.autochange,
        'timeout'   : cmdargs.timeout,
        'profile'   : cmdargs.profile,
        }

    if logger.getEffectiveLevel() == logging.DEBUG:
        logger.debug('Printer arguments')
        for k,v in args.items():
            logger.debug(k.rjust(20) + ": %s" %str(v))

    printers  = [
        SystemPrinter(color=colors['red'],   **args),
        MPDPrinter   (color=colors['green'], **args),
        GPSPrinter   (color=colors['blue'],  **args),
        ]

    def cleanup_and_exit():
        for p in printers:
            logger.debug("Stopping %s" % type(p).__name__)
            p.stop()
            logger.debug("Stopped  %s" % type(p).__name__)
        lcd.off()
        logger.info('Exiting')
        logging.shutdown()
        sys.exit(0)
        
    import signal
    signal.signal(signal.SIGTERM, lambda x,y: cleanup_and_exit())
    
    for p in printers:
        logger.info("Using %s" % type(p).__name__)
    logger.info("Starting loop")
        
    loop = Loop(printers=printers, **args)
    try:
        while loop.iterate():
            pass
    except KeyboardInterrupt:
        pass

    cleanup_and_exit()
    
if __name__ == '__main__':
    main()
